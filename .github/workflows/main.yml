name: Playwright Tests CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

  test:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test_class: [UITests, APITests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Playwright
        run: |
          dotnet tool install --global Microsoft.Playwright.CLI
          dotnet build --configuration Release
          playwright install --with-deps

      - name: Ensure Playwright assets are present
        run: |
          dotnet build --configuration Release --no-restore

      - name: Ensure Allure NUnit Adapter is installed
        run: |
          dotnet add ./tests/tests.csproj package Allure.NUnit
          dotnet add ./tests/tests.csproj package Allure.Commons
          dotnet restore
      
      - name: Create Allure Results Directory
        run: mkdir -p allure-results
        
      - name: Run tests with TRX logger
        run: |
          dotnet test ./tests/tests.csproj --configuration Release --results-directory "allure-results" --logger "trx;LogFileName=TestResults.trx"

      - name: Install Allure CLI
        run: |
          npm install -g allure-commandline

      - name: Generate Allure Report
        run: |
          ls -la allure-results
          allure generate --clean -o ./allure-report || echo "Allure report generation failed"

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.test_class }}-${{ github.run_id }}
          path: allure-report

  merge-reports:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Allure Report Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: allure-report-*
          merge-multiple: true
          path: combined-allure-report
      
      - name: Install Allure CLI in merge job
        run: |
          npm install -g allure-commandline
      
      - name: Merge Allure Reports
        run: |
          allure generate combined-allure-report --clean -o final-allure-report || echo "Allure merge failed"
      
      - name: Upload Final Merged Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: final-allure-report-${{ github.run_id }}
          path: final-allure-report

  deploy:
    needs: merge-reports
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Report action from marketplace
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results
          allure_history: allure-history

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
